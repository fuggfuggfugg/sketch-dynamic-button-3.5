// Dynamic Button Plugin (cmd j)
/*
  Original code from https://github.com/ddwht/sketch-dynamic-button
  Fixed for Sketch 3.5 by Bohemian Coding
  UPDATE: Mar 1: 2016 - Issue 1
  UPDATE: May 19: 2016 - Update for 3.8
  UPDATE: Jul 20: 2016 - Update for 39
  UPDATE: Sep 19: 2016 - Better error handling
  UPDATE: Oct 25: 2016 - Remove check for Text Layer
  UPDATE: Dec 10: 2016 - Add Default values so users can customize
  UPDATE: Feb 12: 2016 - Symbols First Pass
*/

var buttonColor = [216,216,216,100]        // replace with [Red,Green,Blue,Opacity%] eg: [216,216,216,100]
var cornerRadius = 5                       // replace with integer value.
// var defaultPadding = '20:20'               // replace with string value eg: '20:20' or '20:50:20:50'


function addLayerOfRectType(parent,rect) {
    var style = MSDefaultStyle.defaultStyle();
    var rectShape=MSRectangleShape.alloc().init();
    rectShape.cornerRadiusFloat = cornerRadius;
    rectShape.frame = MSRect.rectWithRect(rect);
    var container=MSShapeGroup.alloc().init();
    container.addLayers([rectShape]);
    container.style().addStylePartOfType(0);

    if (buttonColor && buttonColor.length == 4) {
      var fill = container.style().fills().firstObject();
      red = buttonColor[0]/255;
      green = buttonColor[1]/255;
      blue = buttonColor[2]/255;
      opacity = buttonColor[3]/100;
      fill.color = MSColor.colorWithRed_green_blue_alpha(red,green,blue,opacity);
    }

    container.resizeToFitChildrenWithOption(1);
    parent.addLayers([container]);
    return container;
}

function alert(msg, title) {
  title = title || "alert";
  var app = [NSApplication sharedApplication];
  [app displayDialog:msg withTitle:title];
}

function getBackgroundForGroup(group) {
  var groupLayers = [group layers];
  for (var i=0; i<[groupLayers count]; i++) {
    var layer = [groupLayers objectAtIndex:i];
    if ([layer name] == "BG") {
      return layer;
    }
  }
  return false;
}

function getButtonDimensionsForLayer(layer){
  // log("getButtonDimensionsForLayer: " + [layer frame])
  var frame = [layer frame]
  var layerHeight = [frame height],
      layerWidth =  [frame width],
      layerX =      [frame x],
      layerY =      [frame y]
  
  // if (defaultPadding) {
  //   layer.name = defaultPadding;
  // };

  var splitLayer = [layer name].split(':');
  var offsetTop,offsetRight,offsetRight,offsetLeft;
  switch(splitLayer.length) {
    case 1: 
      defVal = parseInt(splitLayer[0]) || 20;
      layer.name = defVal + ':' + defVal;
      offsetTop = offsetBottom = offsetRight = offsetLeft = defVal;
      break;
    case 2:
      offsetTop = offsetBottom = parseInt(splitLayer[0]) || 0;
      offsetRight = offsetLeft = parseInt(splitLayer[1]) || 0;
      break;
    case 3:
      offsetTop = parseInt(splitLayer[0]) || 0;
      offsetRight = offsetLeft = parseInt(splitLayer[1]) || 0;
      offsetBottom = parseInt(splitLayer[2]) || 0;
      break;
    case 4:
      offsetTop = parseInt(splitLayer[0]) || 0;
      offsetRight = parseInt(splitLayer[1]) || 0;
      offsetBottom = parseInt(splitLayer[2]) || 0;
      offsetLeft = parseInt(splitLayer[3]) || 0;
      break;
    default: 
      alert('Wrong format', 'Error');
  }
  return {
    x: layerX,
    y: layerY,
    width: layerWidth,
    height: layerHeight,
    offsetTop: offsetTop,
    offsetBottom: offsetBottom,
    offsetLeft: offsetLeft,
    offsetRight: offsetRight,
    totalWidth: (layerWidth + offsetLeft  + offsetRight),
    totalHeight: (layerHeight + offsetTop  + offsetBottom)
  }
}

// recursive for future 
function recursiveDynamic(selection, document){
  for (var i=0; i < [selection count]; i++) {
    var currentLayer = [selection objectAtIndex:i],
        parentGroup = [currentLayer parentGroup];

    // if Symbol 
    if( [currentLayer class] ==  MSSymbolInstance ){
      var existingOverrides = currentLayer.overrides();
      var symbolMaster = currentLayer.symbolMaster();
      var children = symbolMaster.children();
      var layerIDs = {};
      var masterButtonDimensions;      

      for (var i = 0; i < [children count]; i++){
        var layer = children[i];
        if( [layer class] ==  MSTextLayer ){
          // change layer resizing type to "Resize Object" and switch it back again.
          oldResizingType = layer.resizingType()

          if (oldResizingType != 2) {
            layer.resizingType = 2;
            document.displayMessage("Dynamic Button has updated the 'Resizing' option of the Master Symbol Text Layer to work correctly. ");
          }

          ObjectId = layer.objectID().toString()
          var symbolInstanceValue = existingOverrides.objectForKey(0).objectForKey(ObjectId);

          // To get the exact width of the overriden string, I update the text in the master, get the width and reset it again.
          oldVal = layer.stringValue()
          layer.stringValue = symbolInstanceValue;
          masterButtonDimensions = getButtonDimensionsForLayer(layer)
          layer.stringValue = oldVal;
        }
      }

      // update the instance width and height accordingly using the masterButtonDimensions
      var instanceWidth = masterButtonDimensions.width + masterButtonDimensions.offsetLeft + masterButtonDimensions.offsetRight
      var instanceHeight = masterButtonDimensions.height + masterButtonDimensions.offsetTop + masterButtonDimensions.offsetBottom
      
      // set width and height to the symbol instance motherfucker!
      var frame = [currentLayer frame]
      [frame setHeight:instanceHeight]
      [frame  setWidth:instanceWidth]

    } else {

      //if( [currentLayer class] ==  MSTextLayer ){
        var BG = getBackgroundForGroup(parentGroup),
        buttonDimensions = getButtonDimensionsForLayer(currentLayer)

        if (BG) {
        // Update background
          var frame = [BG frame]
          [frame setHeight:buttonDimensions.totalHeight]
          [frame  setWidth:buttonDimensions.totalWidth]

          var clframe = [currentLayer frame]
          var layerX = [clframe x],
          layerY = [clframe y]

          frame.x = layerX - buttonDimensions.offsetLeft;
          frame.y = layerY - buttonDimensions.offsetTop;
        } else {
          // Create group and background
          var group = MSLayerGroup.new();
          var groupFrame = group.frame();
          groupFrame.setConstrainProportions(false);
          group.setName('Dynamic group');

          parentGroup.addLayers([group]);
          var BGLayer = addLayerOfRectType(group, currentLayer.rect());

          BGLayer.name = "BG"
          var frame = [BGLayer frame]

          [frame setHeight:buttonDimensions.totalHeight]
          [frame  setWidth:buttonDimensions.totalWidth]
          frame.x = buttonDimensions.x - buttonDimensions.offsetLeft
          frame.y = buttonDimensions.y - buttonDimensions.offsetTop
          
          parentGroup.removeLayer(currentLayer);
          var s = group.addLayers([currentLayer]);
          currentLayer.setIsSelected(false);
          group.resizeToFitChildrenWithOption(1);
        } 
      // }      
    }
  }  
}

var onRun = function(context){
  var selection = context.selection;
  var doc = context.document;
  var page = doc.currentPage();

  if ([selection count] == 0) {
    alert('You need to select a Text layer', 'Selection is empty');
  } else {
    recursiveDynamic(selection, doc)
  }
}
